//Author: Riley Bates

/**
 *Game description
 */

class EraserGame {
   field Square square; // the square of this game
   field Square square2;
   field square square3;

   field Circle circle;
   field Circle circle2;
   field circle circle3;

   field int direction; // the square's current direction: 
                        // 0=none, 1=up, 2=down, 3=left, 4=right

   /** Constructs a new Square Game. */
   constructor EraserGame new() {
      // Creates a 30 by 30 pixels square and positions it at the top-left
      // of the screen.
      do Output.printString("                       Clean the screen!");
      let square = Square.new(0, 0, 30);


      let square2 = Square.new(425,100,20);
      let square3 = Square.new(315,190,40);

      let circle = Circle.new(350,90,10);
      let circle2 = Circle.new(200,200,15);
      let circle3 = Circle.new(75,180,30);

      let direction = 0;  // initial state is no movement
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do square.dispose();
      do square2.dispose();
      do square3.dispose();

      do circle.dispose();
      do circle2.dispose();
      do circle3.dispose();
      
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveSquare() {
      if (direction = 1) { do square.moveUp(); }
      if (direction = 2) { do square.moveDown(); }
      if (direction = 3) { do square.moveLeft(); }
      if (direction = 4) { do square.moveRight(); }
      do Sys.wait(5);  // delays the next movement
      return;
   }

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      
      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            do moveSquare();
         }
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveSquare();
         }
     } // while
     return;
   }
}



